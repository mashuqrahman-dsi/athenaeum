/*
 * This file is generated by jOOQ.
*/
package com.mashuq.athenaeum.domain.athenaeum.tables;


import com.mashuq.athenaeum.domain.athenaeum.Athenaeum;
import com.mashuq.athenaeum.domain.athenaeum.Indexes;
import com.mashuq.athenaeum.domain.athenaeum.Keys;
import com.mashuq.athenaeum.domain.athenaeum.tables.records.InformationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Information extends TableImpl<InformationRecord> {

    private static final long serialVersionUID = -1913385266;

    /**
     * The reference instance of <code>ATHENAEUM.INFORMATION</code>
     */
    public static final Information INFORMATION = new Information();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InformationRecord> getRecordType() {
        return InformationRecord.class;
    }

    /**
     * The column <code>ATHENAEUM.INFORMATION.INFORMATIONID</code>.
     */
    public final TableField<InformationRecord, Integer> INFORMATIONID = createField("INFORMATIONID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ATHENAEUM.INFORMATION.REQUESTID</code>.
     */
    public final TableField<InformationRecord, Integer> REQUESTID = createField("REQUESTID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ATHENAEUM.INFORMATION.REFERENCE</code>.
     */
    public final TableField<InformationRecord, String> REFERENCE = createField("REFERENCE", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>ATHENAEUM.INFORMATION.STATUS</code>.
     */
    public final TableField<InformationRecord, String> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>ATHENAEUM.INFORMATION.DATA</code>.
     */
    public final TableField<InformationRecord, String> DATA = createField("DATA", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>ATHENAEUM.INFORMATION</code> table reference
     */
    public Information() {
        this(DSL.name("INFORMATION"), null);
    }

    /**
     * Create an aliased <code>ATHENAEUM.INFORMATION</code> table reference
     */
    public Information(String alias) {
        this(DSL.name(alias), INFORMATION);
    }

    /**
     * Create an aliased <code>ATHENAEUM.INFORMATION</code> table reference
     */
    public Information(Name alias) {
        this(alias, INFORMATION);
    }

    private Information(Name alias, Table<InformationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Information(Name alias, Table<InformationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Athenaeum.ATHENAEUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_F, Indexes.PRIMARY_KEY_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InformationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INFORMATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InformationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F5;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InformationRecord>> getKeys() {
        return Arrays.<UniqueKey<InformationRecord>>asList(Keys.CONSTRAINT_F5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<InformationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InformationRecord, ?>>asList(Keys.CONSTRAINT_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Information as(String alias) {
        return new Information(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Information as(Name alias) {
        return new Information(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Information rename(String name) {
        return new Information(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Information rename(Name name) {
        return new Information(name, null);
    }
}
