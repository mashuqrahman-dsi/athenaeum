/*
 * This file is generated by jOOQ.
*/
package com.mashuq.athenaeum.domain.athenaeum.tables;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import com.mashuq.athenaeum.domain.athenaeum.Athenaeum;
import com.mashuq.athenaeum.domain.athenaeum.Indexes;
import com.mashuq.athenaeum.domain.athenaeum.Keys;
import com.mashuq.athenaeum.domain.athenaeum.tables.records.BookRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = {"http://www.jooq.org",
		"jOOQ version:3.10.5"}, comments = "This class is generated by jOOQ")
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Book extends TableImpl<BookRecord> {

	private static final long serialVersionUID = -1517094967;

	/**
	 * The reference instance of <code>ATHENAEUM.BOOK</code>
	 */
	public static final Book BOOK = new Book();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BookRecord> getRecordType() {
		return BookRecord.class;
	}

	/**
	 * The column <code>ATHENAEUM.BOOK.BOOKID</code>.
	 */
	public final TableField<BookRecord, Integer> BOOKID = createField("BOOKID",
			org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
			this, "");

	/**
	 * The column <code>ATHENAEUM.BOOK.TITLE</code>.
	 */
	public final TableField<BookRecord, String> TITLE = createField("TITLE",
			org.jooq.impl.SQLDataType.VARCHAR(4000).nullable(false), this, "");

	/**
	 * The column <code>ATHENAEUM.BOOK.SUBTITLE</code>.
	 */
	public final TableField<BookRecord, String> SUBTITLE = createField(
			"SUBTITLE", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

	/**
	 * The column <code>ATHENAEUM.BOOK.ISBN10</code>.
	 */
	public final TableField<BookRecord, String> ISBN10 = createField("ISBN10",
			org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

	/**
	 * The column <code>ATHENAEUM.BOOK.ISBN13</code>.
	 */
	public final TableField<BookRecord, String> ISBN13 = createField("ISBN13",
			org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

	/**
	 * The column <code>ATHENAEUM.BOOK.INDEXED</code>.
	 */
	public final TableField<BookRecord, Byte> INDEXED = createField("INDEXED",
			org.jooq.impl.SQLDataType.TINYINT, this, "");

	/**
	 * Create a <code>ATHENAEUM.BOOK</code> table reference
	 */
	public Book() {
		this(DSL.name("BOOK"), null);
	}

	/**
	 * Create an aliased <code>ATHENAEUM.BOOK</code> table reference
	 */
	public Book(String alias) {
		this(DSL.name(alias), BOOK);
	}

	/**
	 * Create an aliased <code>ATHENAEUM.BOOK</code> table reference
	 */
	public Book(Name alias) {
		this(alias, BOOK);
	}

	private Book(Name alias, Table<BookRecord> aliased) {
		this(alias, aliased, null);
	}

	private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Athenaeum.ATHENAEUM;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.PRIMARY_KEY_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<BookRecord, Integer> getIdentity() {
		return Keys.IDENTITY_BOOK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<BookRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_1;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<BookRecord>> getKeys() {
		return Arrays.<UniqueKey<BookRecord>>asList(Keys.CONSTRAINT_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Book as(String alias) {
		return new Book(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Book as(Name alias) {
		return new Book(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Book rename(String name) {
		return new Book(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Book rename(Name name) {
		return new Book(name, null);
	}
}
